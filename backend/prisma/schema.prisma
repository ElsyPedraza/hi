generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  password  String
  firstName String
  lastName  String
  birthdate DateTime
  phone     String?
  avatar    String?
  createdAt DateTime    @default(now())
  plans     dailyPlan[]
  favorites favorite[]
  tickets   ticket[]
}

model attraction {
  id          Int             @id @default(autoincrement())
  name        String
  category    String
  description String?
  image       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  planItems   dailyPlanItem[]
  shows       show[]
  waitTimes   waitTime[]
}

model waitTime {
  id           Int        @id @default(autoincrement())
  attractionId Int
  waitMinutes  Int
  updatedAt    DateTime   @updatedAt
  attraction   attraction @relation(fields: [attractionId], references: [id])

  @@index([attractionId], map: "waitTime_attractionId_fkey")
}

model show {
  id           Int            @id @default(autoincrement())
  title        String
  description  String
  attractionId Int
  image        String?
  attraction   attraction     @relation(fields: [attractionId], references: [id])
  schedules    showSchedule[]

  @@index([attractionId], map: "show_attractionId_fkey")
}

model showSchedule {
  id        Int             @id @default(autoincrement())
  showId    Int
  date      DateTime
  startTime DateTime
  endTime   DateTime
  planItems dailyPlanItem[]
  show      show            @relation(fields: [showId], references: [id])

  @@index([showId], map: "showSchedule_showId_fkey")
}

model parkHours {
  id        Int    @id @default(autoincrement())
  dayOfWeek Int
  openTime  String
  closeTime String
}

model dailyPlan {
  id     Int             @id @default(autoincrement())
  userId Int
  date   DateTime
  items  dailyPlanItem[]
  user   user            @relation(fields: [userId], references: [id])

  @@index([userId], map: "dailyPlan_userId_fkey")
}

model dailyPlanItem {
  id             Int           @id @default(autoincrement())
  planId         Int
  showScheduleId Int?
  attractionId   Int?
  preferredTime  DateTime?
  attraction     attraction?   @relation(fields: [attractionId], references: [id])
  plan           dailyPlan     @relation(fields: [planId], references: [id])
  showSchedule   showSchedule? @relation(fields: [showScheduleId], references: [id])

  @@index([attractionId], map: "DailyPlanItem_attractionId_fkey")
  @@index([planId], map: "DailyPlanItem_planId_fkey")
  @@index([showScheduleId], map: "DailyPlanItem_showScheduleId_fkey")
}

model ticket {
  id              Int        @id @default(autoincrement())
  userId          Int
  typeId          Int
  purchaseDate    DateTime   @default(now())
  validDate       DateTime
  qrCode          String     @unique
  stripeSessionId String?    @unique
  status          String     @default("active")
  buyerName       String?
  buyerEmail      String?
  buyerPhone      String?
  type            ticketType @relation(fields: [typeId], references: [id])
  user            user       @relation(fields: [userId], references: [id])

  @@index([typeId], map: "ticket_typeId_fkey")
  @@index([userId], map: "ticket_userId_fkey")
}

model ticketType {
  id           Int      @id @default(autoincrement())
  name         String
  price        Float
  durationDays Int
  description  String?
  features     Json?
  tickets      ticket[]
}

model favorite {
  id       Int    @id @default(autoincrement())
  userId   Int
  itemId   Int
  itemType String
  user     user   @relation(fields: [userId], references: [id])

  @@index([userId], map: "favorite_userId_fkey")
}
